# .github/workflows/ci.yml

name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.11"

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: pip install uv
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Run Black
      run: uv run black --check .
    
    - name: Run isort
      run: uv run isort --check-only .
    
    - name: Run Ruff
      run: uv run ruff check .
    
    - name: Run MyPy
      run: uv run mypy backend bot worker

  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: smartcatcher_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 3s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: pip install uv
    
    - name: Install dependencies
      run: uv sync --dev
    
    - name: Set environment variables
      run: |
        echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/smartcatcher_test" >> $GITHUB_ENV
        echo "REDIS_URL=redis://localhost:6379/1" >> $GITHUB_ENV
        echo "JWT_SECRET_KEY=test-secret-key-for-github-actions-not-secure" >> $GITHUB_ENV
        echo "TELEGRAM_BOT_TOKEN=fake_token_for_testing" >> $GITHUB_ENV
    
    - name: Run tests with coverage
      run: uv run pytest --cov=backend --cov=bot --cov=worker --cov-report=xml --cov-report=term-missing
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  build-backend:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: false
        tags: smartcatcher/backend:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-bot:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build bot image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./bot/Dockerfile
        push: false
        tags: smartcatcher/bot:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  build-worker:
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./worker/Dockerfile
        push: false
        tags: smartcatcher/worker:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    runs-on: ubuntu-latest
    needs: [build-backend, build-bot, build-worker]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create test environment file
      run: |
        cat > .env << EOF
        DATABASE_URL=postgresql://postgres:postgres@postgres:5432/smartcatcher
        REDIS_URL=redis://redis:6379
        JWT_SECRET_KEY=test-secret-key-for-integration-tests
        TELEGRAM_BOT_TOKEN=fake_token_for_integration_tests
        EBAY_CLIENT_ID=fake_ebay_client_id
        EBAY_CLIENT_SECRET=fake_ebay_client_secret
        ETSY_API_KEY=fake_etsy_api_key
        DEBUG=true
        EOF
    
    - name: Run integration tests
      run: |
        docker-compose up -d postgres redis
        sleep 10
        
        # Run database migrations
        docker-compose run --rm backend alembic upgrade head
        
        # Run a simple health check
        docker-compose up -d backend
        sleep 15
        
        # Test backend health endpoint
        curl -f http://localhost:8000/health || exit 1
        
        echo "Integration tests passed!"
    
    - name: Cleanup
      if: always()
      run: docker-compose down -v

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install UV
      run: pip install uv
    
    - name: Security check with bandit
      run: |
        uv add --dev bandit[toml]
        uv run bandit -r backend bot worker -f json -o bandit-report.json || true
    
    - name: Security check with safety
      run: |
        uv add --dev safety
        uv run safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add actual deployment commands here
        echo "Staging deployment completed!"

  deploy-production:
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add actual deployment commands here
        echo "Production deployment completed!"
