services:
  postgres-test:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: smartcatcher-test
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 3s
      retries: 5

  redis-test:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5

  worker-test:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ./worker:/app/worker
      - ./backend:/app/backend
    command: celery -A worker.celery_app worker -Q scraper --loglevel=info

  scheduler-test:
    build:
      context: .
      dockerfile: ./worker/Dockerfile
    #    command: ["sleep", "600"]
    env_file:
      - .env
    #    environment:
    #      - DATABASE_URL=postgresql://postgres:postgres@postgres-test:5432/smartcatcher-test
    #      - REDIS_URL=redis://redis-test:6379
    #      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-supersecretjwtkey}
    #      - EBAY_CLIENT_ID=${EBAY_CLIENT_ID}
    #      - EBAY_CLIENT_SECRET=${EBAY_CLIENT_SECRET}
    #      - ETSY_API_KEY=${ETSY_API_KEY}
    #      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ./worker:/app/worker
      - ./backend:/app/backend
    command: celery -A worker.celery_app beat --loglevel=info

  test-runner:
    build:
      context: .
      dockerfile: ./tests/Dockerfile
    env_file:
      - .env
    depends_on:
      postgres-test:
        condition: service_healthy
      redis-test:
        condition: service_healthy
    volumes:
      - ./backend:/app/backend
      - ./examples:/app/examples
      - ./bot:/app/bot
      - ./worker:/app/worker
      - ./tests:/app/tests
#    command: sh -c "cd /app/backend && alembic upgrade head && alembic revision --autogenerate -m \"initial migration\" && alembic upgrade head"
    command: sh -c "pytest -v -s"
